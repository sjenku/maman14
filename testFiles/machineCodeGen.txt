int isValidOperetionValueI(char *values)
{
    /* variables */
    seperator *sep;
    char *ch;

    /* initial */
    sep = initSeprator();

    /* seperete the values to individuals words */
    appendStringWithSpace(sep, values);
    /* check if there is 3 operands */
    if (numberOfWords(sep) != 1)
    {
        destroySeperator(sep);
        return FAILURE;
    }
    /* there is correct number of operands */
    else
    {
        ch = getPointerToWord(sep, 1);
        /* check if it register sign */
        if ((*ch) == '$')
        {
            if (!isRegister(ch))
            {
                destroySeperator(sep);
                return FAILURE;
            }
        }
        /* check if it's valid symbol name */
        else
        {
            if (!isNumbersOrLetters(ch))
            {
                destroySeperator(sep);
                return FAILURE;
            }
        }
        /* it's valid register or valid symbol name*/
        destroySeperator(sep);
        return SUCCESS;
    }
    destroySeperator(sep);
    return FAILURE;
}

int isValidOperetionValueJ(char *values)
{
    /* variables */
    seperator *sep;
    char *ch;

    /* initial */
    sep = initSeprator();

    /* seperete the values to individuals words */
    appendStringWithSpace(sep, values);
    /* check if there is 3 operands */
    if (numberOfWords(sep) != 1)
    {
        destroySeperator(sep);
        return FAILURE;
    }
    /* there is correct number of operands */
    else
    {
        ch = getPointerToWord(sep, 1);
        /* check if it register sign */
        if ((*ch) == '$')
        {
            if (!isRegister(ch))
            {
                destroySeperator(sep);
                return FAILURE;
            }
        }
        /* check if it's valid symbol name */
        else
        {
            if (!isNumbersOrLetters(ch))
            {
                destroySeperator(sep);
                return FAILURE;
            }
        }
        /* it's valid register or valid symbol name*/
        destroySeperator(sep);
        return SUCCESS;
    }
    destroySeperator(sep);
    return FAILURE;
}

int isValidOperetionValueR(char *values)
{
    /* variables */
    seperator *sep;
    char *value;
    int i;

    /* initial */
    sep = initSeprator();

    /* seperete the values to individuals words */
    if (appendStringWithComma(sep, values))
    {
        /* check if there is 3 operands */
        if (numberOfWords(sep) != 3)
        {
            destroySeperator(sep);
            return FAILURE;
        }
        /* there is correct number of operands */
        else
        {
            /* iterate threw each of them and check if it's register*/
            for (i = 0; i < 3; i++)
            {
                value = getPointerToWord(sep, i + 1);
                if (!isRegister(value))
                {
                    destroySeperator(sep);
                    return FAILURE;
                }
            }
            destroySeperator(sep);
            return SUCCESS;
        }
    }
    destroySeperator(sep);
    return FAILURE;
}