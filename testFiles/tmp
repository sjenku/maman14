void readPrintLineFile(int argc, char *argv[])
{
    char *numCopy = "1";
    size_t size = 10;
    char *string = (char *)malloc(size);
    for (int i = 1; i < argc; i++)
    {
        printf("The Iteretion %d out of %d\n", i, argc);
        char *filename = argv[i];
        FILE *f = fopen(filename, "r");
        char fCopyName[12];
        snprintf(fCopyName, 12, "copy%d.txt", i);
        printf("fcopy=> %s", fCopyName);
        FILE *fCopy = fopen(fCopyName, "w");
        if (f != NULL)
        {
            int bytes_read;
            printf("File is reading\n");
            printf("The File Name is => %s\n", filename);
            for (int j = 1; (bytes_read = getline(&string, &size, f)) != -1; j++)
            {
                //write to file
                printf("%s", string);
                fputs(string, fCopy);
            }
            fclose(f);
        }
        if (fCopy != NULL)
            fclose(fCopy);
        numCopy++;
    }
    free(string);
}







 numOfDataElements = 1;
    if (str == NULL || strcmp(str, "") == 0)
        return FAILURE;

    ch = str;
    while ((*ch) != '\0')
    {
        /* Space */
        if (((*ch) == ' ' || (*ch) == '\t'))
        {

            if (prevCharNumber)
                allowedNumber = FALSE;
        }
        /* Comma */
        else if ((*ch) == ',' && allowedComma)
        {

            numOfDataElements++;
            allowedComma = FALSE;
            allowedNumber = TRUE;
            prevCharNumber = FALSE;
            allowedSign = TRUE;
        }
        /* Number */
        else if ((*ch) >= '0' && (*ch) <= '9' && allowedNumber)
        {
            allowedComma = TRUE;
            prevCharNumber = TRUE;
            allowedSign = FALSE;
        }
        /* Sing */
        else if (((*ch) == '-' || (*ch == '+')) && allowedSign)
        {
            allowedSign = FALSE;
            allowedNumber = TRUE;
            allowedComma = FALSE;
            allowedSpace = FALSE;
        }
        else
        {
            return FAILURE;
        }
        ch++;
    }

    /*TODO: handle in for loop with strlen to insert it up*/
    /*check if the last char is comma or sign*/
    if ((*(ch - 1) == ',') || (*(ch - 1) == '-') || (*(ch - 1) == '+'))
        return FAILURE;

    return numOfDataElements;







    /* get the symbol node that mentioned as value */
                    tmpSymbolListNode = getPointerToSymbol(symbolList, getPointerToWord(seperator, wordIndex + 1));
                    /* check if this valid symbol and it's exist in the symbol list */
                    if (tmpSymbolListNode != NULL)
                    {
                        /* if it defiened as external insert to externals list */
                        if (strcmp(tmpSymbolListNode->attribute, ATTRIBUTE_EXTERNAL))
                        {
                            /* save the external symbol with the relative address for creating later .ext file*/
                            externalsList = getExtList();
                            insertExtTo(externalsList, tmpSymbolListNode->name, tmpOperetionNode->address - IC_INCREASER);
                        }
                    }
                    /* else the symbol not exist and it's not register, insert error */
                    else if (isRegister(getPointerToWord(seperator, wordIndex + 1)) == REG_FAILURE)
                    {
                        insertErrorTo(errorsList, filename, lineNumber, getPointerToWord(seperator, wordIndex + 1), "the symbol not exist");
                    }
                    